drop policy "Enable insert for authenticated users only" on "public"."short_url_providers";

create table "public"."api_keys" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null default auth.uid(),
    "secret_id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "deleted" boolean not null default false
);


alter table "public"."api_keys" enable row level security;

create table "public"."url_summaries" (
    "id" bigint generated by default as identity not null,
    "url_id" bigint not null,
    "summary" text,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."url_summaries" enable row level security;

alter table "public"."profiles" add column "email" text not null;

alter table "public"."profiles" alter column "avatar_url" set data type text using "avatar_url"::text;

alter table "public"."profiles" alter column "username" set data type text using "username"::text;

alter table "public"."short_urls" add column "deleted" boolean not null default false;

CREATE UNIQUE INDEX api_keys_pkey ON public.api_keys USING btree (id);

CREATE UNIQUE INDEX api_keys_secret_id_key ON public.api_keys USING btree (secret_id);

CREATE UNIQUE INDEX profiles_email_key ON public.profiles USING btree (email);

CREATE UNIQUE INDEX url_summaries_pkey ON public.url_summaries USING btree (id);

alter table "public"."api_keys" add constraint "api_keys_pkey" PRIMARY KEY using index "api_keys_pkey";

alter table "public"."url_summaries" add constraint "url_summaries_pkey" PRIMARY KEY using index "url_summaries_pkey";

alter table "public"."api_keys" add constraint "api_keys_secret_id_key" UNIQUE using index "api_keys_secret_id_key";

alter table "public"."api_keys" add constraint "api_keys_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."api_keys" validate constraint "api_keys_user_id_fkey";

alter table "public"."profiles" add constraint "profiles_email_key" UNIQUE using index "profiles_email_key";

alter table "public"."url_summaries" add constraint "url_summaries_url_id_fkey" FOREIGN KEY (url_id) REFERENCES short_urls(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."url_summaries" validate constraint "url_summaries_url_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  INSERT INTO public.profiles (id, username, avatar_url, email)
  values (
    new.id,
    new.raw_user_meta_data ->> 'preferred_username',
    new.raw_user_meta_data ->> 'avatar_url',
    new.raw_user_meta_data ->> 'email'
  )
  ON CONFLICT (id) 
  DO 
    UPDATE SET
      username = new.raw_user_meta_data ->> 'preferred_username',
      avatar_url = new.raw_user_meta_data ->> 'avatar_url',
      email = new.raw_user_meta_data ->> 'email';

  UPDATE public.invited_users SET 
    accepted_on = now(),
    accepted = true
  WHERE
    invited_users.username = new.raw_user_meta_data ->> 'preferred_username';

  return new;
end;$function$
;

CREATE OR REPLACE FUNCTION public.update_invite_status()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  UPDATE public.invited_users SET 
    accepted_on = now(),
    accepted = true,
    email = new.email
  WHERE
    invited_users.username = new.username;

  return new;
end;$function$
;

grant delete on table "public"."api_keys" to "anon";

grant insert on table "public"."api_keys" to "anon";

grant references on table "public"."api_keys" to "anon";

grant select on table "public"."api_keys" to "anon";

grant trigger on table "public"."api_keys" to "anon";

grant truncate on table "public"."api_keys" to "anon";

grant update on table "public"."api_keys" to "anon";

grant delete on table "public"."api_keys" to "authenticated";

grant insert on table "public"."api_keys" to "authenticated";

grant references on table "public"."api_keys" to "authenticated";

grant select on table "public"."api_keys" to "authenticated";

grant trigger on table "public"."api_keys" to "authenticated";

grant truncate on table "public"."api_keys" to "authenticated";

grant update on table "public"."api_keys" to "authenticated";

grant delete on table "public"."api_keys" to "service_role";

grant insert on table "public"."api_keys" to "service_role";

grant references on table "public"."api_keys" to "service_role";

grant select on table "public"."api_keys" to "service_role";

grant trigger on table "public"."api_keys" to "service_role";

grant truncate on table "public"."api_keys" to "service_role";

grant update on table "public"."api_keys" to "service_role";

grant delete on table "public"."url_summaries" to "anon";

grant insert on table "public"."url_summaries" to "anon";

grant references on table "public"."url_summaries" to "anon";

grant select on table "public"."url_summaries" to "anon";

grant trigger on table "public"."url_summaries" to "anon";

grant truncate on table "public"."url_summaries" to "anon";

grant update on table "public"."url_summaries" to "anon";

grant delete on table "public"."url_summaries" to "authenticated";

grant insert on table "public"."url_summaries" to "authenticated";

grant references on table "public"."url_summaries" to "authenticated";

grant select on table "public"."url_summaries" to "authenticated";

grant trigger on table "public"."url_summaries" to "authenticated";

grant truncate on table "public"."url_summaries" to "authenticated";

grant update on table "public"."url_summaries" to "authenticated";

grant delete on table "public"."url_summaries" to "service_role";

grant insert on table "public"."url_summaries" to "service_role";

grant references on table "public"."url_summaries" to "service_role";

grant select on table "public"."url_summaries" to "service_role";

grant trigger on table "public"."url_summaries" to "service_role";

grant truncate on table "public"."url_summaries" to "service_role";

grant update on table "public"."url_summaries" to "service_role";

create policy "Enable insert access for all users"
on "public"."expanded_urls"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for all users"
on "public"."expanded_urls"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."url_summaries"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."url_summaries"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."short_url_providers"
as permissive
for insert
to anon
with check (true);



