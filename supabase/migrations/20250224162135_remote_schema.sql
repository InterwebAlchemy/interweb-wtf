create table "public"."url_scan_ids" (
    "id" bigint generated by default as identity not null,
    "url" text,
    "scan_id" text,
    "created_at" timestamp with time zone not null default now(),
    "completed" boolean not null default false
);


alter table "public"."url_scan_ids" enable row level security;

alter table "public"."api_keys" add column "name" text;

alter table "public"."api_keys" add column "obfuscated_key" text;

alter table "public"."api_keys" alter column "id" set default gen_random_uuid();

alter table "public"."api_keys" alter column "id" drop identity;

alter table "public"."api_keys" alter column "id" set data type uuid using "id"::uuid;

CREATE UNIQUE INDEX url_scan_ids_pkey ON public.url_scan_ids USING btree (id);

alter table "public"."url_scan_ids" add constraint "url_scan_ids_pkey" PRIMARY KEY using index "url_scan_ids_pkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.generate_api_key(_api_key text, _api_key_name text, _user_id uuid)
 RETURNS uuid
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
  api_secret_id uuid;
  api_key_id uuid;
begin
  select vault.create_secret(_api_key, _api_key_name) into api_secret_id;

  INSERT INTO public.api_keys (user_id, secret_id, name)
  values (
    _user_id,
    api_secret_id,
    _api_key_name
  ) RETURNING id into api_key_id;

  RETURN api_key_id;

end;
$function$
;

CREATE OR REPLACE FUNCTION public.get_user_api_key(_user_id uuid, _key_id uuid)
 RETURNS TABLE(id uuid, name text, key text)
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
   RETURN QUERY
   select
      K.id,
      K.name,
      S.decrypted_secret
    from
      vault.decrypted_secrets S,
      public.api_keys K
    where
      S.id = K.secret_id and
      K.secret_id in (select secret_id from public.api_keys where api_keys.user_id = _user_id and api_keys.id = _key_id and public.api_keys.deleted = false order by api_keys.created_at desc limit 1);
END
$function$
;

CREATE OR REPLACE FUNCTION public.get_user_api_keys(_user_id uuid)
 RETURNS TABLE(id uuid, name text, key text, created_at timestamp with time zone)
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  RETURN QUERY
   select
      K.id,
      K.name,
      K.obfuscated_key,
      K.created_at
    from
      public.api_keys K
    where
      K.user_id = _user_id
    and
      K.deleted = false
    order by K.created_at desc
  ;
END
$function$
;

CREATE OR REPLACE FUNCTION public.get_user_by_api_key(_key text)
 RETURNS TABLE(user_id uuid)
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
   RETURN QUERY
   select
  K.user_id as user_id
from
  public.api_keys K
where
  secret_id in (
    select
      S.id
    from
      vault.decrypted_secrets S
    where
      S.decrypted_secret = _key
  )
  and
    K.user_id in (
      select
        P.id
      from
        public.profiles P, auth.users U
      where
        P.id = U.id
      and
        U.deleted_at is null
      and
        U.banned_until is null
    )
  and
    K.deleted = false
;
END
$function$
;

CREATE OR REPLACE FUNCTION public.increase_inspections(_url_id bigint)
 RETURNS void
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
insert into
  public.url_stats (url_id, inspects)
values
  (_url_id, 1)
on conflict (url_id) do update set
  inspects = url_stats.inspects + 1;

end;$function$
;

CREATE OR REPLACE FUNCTION public.increase_views(_url_id bigint)
 RETURNS void
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
insert into
  public.url_stats (url_id, hits)
values
  (_url_id, 1)
on conflict (url_id) do update set
  hits = url_stats.hits + 1;

end;$function$
;

CREATE OR REPLACE FUNCTION public.store_api_key(_api_key text, _api_key_name text, _obfuscated_key text, _user_id uuid)
 RETURNS uuid
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
  api_secret_id uuid;
  api_key_id uuid;
begin
  select vault.create_secret(_api_key, _api_key_name) into api_secret_id;

  INSERT INTO public.api_keys (user_id, secret_id, name, obfuscated_key)
  values (
    _user_id,
    api_secret_id,
    _api_key_name,
    _obfuscated_key
  ) RETURNING id into api_key_id;

  RETURN api_key_id;

end;
$function$
;

grant delete on table "public"."url_scan_ids" to "anon";

grant insert on table "public"."url_scan_ids" to "anon";

grant references on table "public"."url_scan_ids" to "anon";

grant select on table "public"."url_scan_ids" to "anon";

grant trigger on table "public"."url_scan_ids" to "anon";

grant truncate on table "public"."url_scan_ids" to "anon";

grant update on table "public"."url_scan_ids" to "anon";

grant delete on table "public"."url_scan_ids" to "authenticated";

grant insert on table "public"."url_scan_ids" to "authenticated";

grant references on table "public"."url_scan_ids" to "authenticated";

grant select on table "public"."url_scan_ids" to "authenticated";

grant trigger on table "public"."url_scan_ids" to "authenticated";

grant truncate on table "public"."url_scan_ids" to "authenticated";

grant update on table "public"."url_scan_ids" to "authenticated";

grant delete on table "public"."url_scan_ids" to "service_role";

grant insert on table "public"."url_scan_ids" to "service_role";

grant references on table "public"."url_scan_ids" to "service_role";

grant select on table "public"."url_scan_ids" to "service_role";

grant trigger on table "public"."url_scan_ids" to "service_role";

grant truncate on table "public"."url_scan_ids" to "service_role";

grant update on table "public"."url_scan_ids" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."api_keys"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to update their own data only"
on "public"."api_keys"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."api_keys"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."url_scan_ids"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."url_scan_ids"
as permissive
for select
to public
using (true);



